{"version":3,"file":"js/189.9aa262a2.js","mappings":"mKAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAAa,MAAXJ,EAAIM,KAAaF,EAAG,MAAM,CAACJ,EAAIO,GAAG,oBAAoBH,EAAG,IAAI,CAACI,MAAM,CAAC,KAAO,wCAAwC,OAAS,WAAW,CAACR,EAAIO,GAAG,kBAAkBP,EAAIO,GAAG,4BAA4BH,EAAG,MAAMJ,EAAIS,GAAG,GAAGL,EAAG,MAAMJ,EAAIO,GAAG,mGAAmGH,EAAG,UAAU,CAACI,MAAM,CAAC,YAAc,oBAAoBE,MAAM,CAACC,MAAOX,EAAK,EAAEY,SAAS,SAAUC,GAAMb,EAAIc,EAAED,GAAKE,WAAW,OAAOX,EAAG,UAAU,CAACI,MAAM,CAAC,KAAO,SAAS,YAAc,QAAQE,MAAM,CAACC,MAAOX,EAAK,EAAEY,SAAS,SAAUC,GAAMb,EAAIgB,EAAEH,GAAKE,WAAW,OAAOX,EAAG,WAAW,CAACI,MAAM,CAAC,QAAU,aAAaS,GAAG,CAAC,MAAQjB,EAAIkB,UAAU,CAAClB,EAAIO,GAAG,WAAW,GAAGH,EAAG,MAAM,CAACJ,EAAIO,GAAG,kCACxyBY,EAAkB,CAAC,WAAa,IAAInB,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,OAAO,CAACgB,YAAY,CAAC,aAAa,QAAQZ,MAAM,CAAC,QAAU,YAAY,CAACJ,EAAG,MAAM,CAACJ,EAAIO,GAAG,sQC8BtM,GACAc,KAAAA,gBACAC,OACA,OACAN,EAAAA,KAAAA,OAAAA,MAAAA,MAAAA,KACAF,EAAAA,KAAAA,OAAAA,MAAAA,MAAAA,OAGAS,UACAC,QAAAA,IAAAA,gDAAAA,OAAAA,SAAAA,MACA,kIAEA,gBAEAC,QAAAA,CACAP,UAEA,sCAAAQ,KAAAA,KAAAA,EAAAC,KAAAA,KAAAA,IACA,yBAGAC,MAAAA,CACAD,OACA,kBAEAD,OACA,mBAGAG,SAAAA,CACAvB,OACA,qCAEAoB,OACA,qCAEAC,OACA,uCCpEkR,I,UCO9QG,GAAY,OACd,EACA/B,EACAoB,GACA,EACA,KACA,KACA,MAIF,EAAeW,EAAiB","sources":["webpack://bloid-client/./src/views/socket/SocketConnect.vue?8d9e","webpack://bloid-client/src/views/socket/SocketConnect.vue","webpack://bloid-client/./src/views/socket/SocketConnect.vue?c971","webpack://bloid-client/./src/views/socket/SocketConnect.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(_vm.user== null)?_c('div',[_vm._v(\" please install \"),_c('a',{attrs:{\"href\":\"https://github.com/scenaristeur/bloid\",\"target\":\"_blank\"}},[_vm._v(\"bloid server\")]),_vm._v(\" on your local machine. \"),_c('br'),_vm._m(0),_c('hr'),_vm._v(\" if your Bloid server is not running on http://localhost:5000 please update the config below : \"),_c('b-input',{attrs:{\"placeholder\":\"http://localhost\"},model:{value:(_vm.h),callback:function ($$v) {_vm.h=$$v},expression:\"h\"}}),_c('b-input',{attrs:{\"type\":\"number\",\"placeholder\":\"5000\"},model:{value:(_vm.p),callback:function ($$v) {_vm.p=$$v},expression:\"p\"}}),_c('b-button',{attrs:{\"variant\":\"secondary\"},on:{\"click\":_vm.connect}},[_vm._v(\"Test\")])],1):_c('div',[_vm._v(\" connected to server ;-) \")])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('code',{staticStyle:{\"text-align\":\"left\"},attrs:{\"variant\":\"success\"}},[_c('pre',[_vm._v(\"        git clone https://github.com/scenaristeur/bloid.git\\n        cd bloid\\n        // git submodule update --recursive --remote for later updates\\n        git submodule update --init --recursive\\n        npm install\\n        npm run start\\n\\n      \")])])}]\n\nexport { render, staticRenderFns }","<template>\n  <div>\n\n    <div v-if=\"user== null\">\n      please install <a href=\"https://github.com/scenaristeur/bloid\" target=\"_blank\">bloid server</a> on your local machine.\n      <br>\n\n      <code style=\"text-align:left\" variant=\"success\">\n        <pre>\n          git clone https://github.com/scenaristeur/bloid.git\n          cd bloid\n          // git submodule update --recursive --remote for later updates\n          git submodule update --init --recursive\n          npm install\n          npm run start\n\n        </pre>\n      </code>\n      <hr>\n      if your Bloid server is not running on http://localhost:5000 please update the config below :\n      <b-input  v-model=\"h\" placeholder=\"http://localhost\" />\n      <b-input  type=\"number\" v-model=\"p\" placeholder=\"5000\" />\n      <b-button @click=\"connect\" variant=\"secondary\">Test</b-button>\n    </div>\n    <div v-else>\n      connected to server ;-)\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"SocketConnect\",\n  data(){\n    return {\n      p: this.$store.state.vatch.port,\n      h: this.$store.state.vatch.host\n    }\n  },\n  created(){\n    console.log(window.location.href==\"https://scenaristeur.github.io/bloid-client/\")\n    this.h = window.location.href==\"https://scenaristeur.github.io/bloid-client/\" ? \"http://localhost\" : \"http://\"+window.location.hostname\n\n    this.connect()\n  },\n  methods:{\n    connect(){\n      // console.log(this.h, this.p, this.host, this.port)\n      this.$store.commit('vatch/setServer', {host:this.h, port:this.p})\n      this.$socket_connect()\n    }\n  },\n  watch:{\n    port(){\n      this.p = this.port\n    },\n    host(){\n      this.h = this.host\n    }\n  },\n  computed: {\n    user() {\n      return this.$store.state.vatch.user\n    },\n    host() {\n      return this.$store.state.vatch.host\n    },\n    port() {\n      return this.$store.state.vatch.port\n    },\n  }\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SocketConnect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SocketConnect.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./SocketConnect.vue?vue&type=template&id=25cac5c0&\"\nimport script from \"./SocketConnect.vue?vue&type=script&lang=js&\"\nexport * from \"./SocketConnect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","user","_v","attrs","_m","model","value","callback","$$v","h","expression","p","on","connect","staticRenderFns","staticStyle","name","data","created","console","methods","host","port","watch","computed","component"],"sourceRoot":""}